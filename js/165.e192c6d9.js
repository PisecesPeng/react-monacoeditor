(window.webpackJsonp=window.webpackJsonp||[]).push([[165],{"./node_modules/babel-runtime/core-js/object/define-properties.js":function(e,n,t){e.exports={default:t("./node_modules/babel-runtime/node_modules/core-js/library/fn/object/define-properties.js"),__esModule:!0}},"./node_modules/babel-runtime/core-js/object/freeze.js":function(e,n,t){e.exports={default:t("./node_modules/babel-runtime/node_modules/core-js/library/fn/object/freeze.js"),__esModule:!0}},"./node_modules/babel-runtime/helpers/taggedTemplateLiteral.js":function(e,n,t){"use strict";n.__esModule=!0;var o=i(t("./node_modules/babel-runtime/core-js/object/define-properties.js")),r=i(t("./node_modules/babel-runtime/core-js/object/freeze.js"));function i(e){return e&&e.__esModule?e:{default:e}}n.default=function(e,n){return(0,r.default)((0,o.default)(e,{raw:{value:(0,r.default)(n)}}))}},"./node_modules/babel-runtime/node_modules/core-js/library/fn/object/define-properties.js":function(e,n,t){t("./node_modules/babel-runtime/node_modules/core-js/library/modules/es6.object.define-properties.js");var o=t("./node_modules/babel-runtime/node_modules/core-js/library/modules/_core.js").Object;e.exports=function(e,n){return o.defineProperties(e,n)}},"./node_modules/babel-runtime/node_modules/core-js/library/fn/object/freeze.js":function(e,n,t){t("./node_modules/babel-runtime/node_modules/core-js/library/modules/es6.object.freeze.js"),e.exports=t("./node_modules/babel-runtime/node_modules/core-js/library/modules/_core.js").Object.freeze},"./node_modules/babel-runtime/node_modules/core-js/library/modules/_a-function.js":function(e,n){e.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},"./node_modules/babel-runtime/node_modules/core-js/library/modules/_an-object.js":function(e,n,t){var o=t("./node_modules/babel-runtime/node_modules/core-js/library/modules/_is-object.js");e.exports=function(e){if(!o(e))throw TypeError(e+" is not an object!");return e}},"./node_modules/babel-runtime/node_modules/core-js/library/modules/_array-includes.js":function(e,n,t){var o=t("./node_modules/babel-runtime/node_modules/core-js/library/modules/_to-iobject.js"),r=t("./node_modules/babel-runtime/node_modules/core-js/library/modules/_to-length.js"),i=t("./node_modules/babel-runtime/node_modules/core-js/library/modules/_to-absolute-index.js");e.exports=function(e){return function(n,t,s){var a,l=o(n),d=r(l.length),u=i(s,d);if(e&&t!=t){for(;d>u;)if((a=l[u++])!=a)return!0}else for(;d>u;u++)if((e||u in l)&&l[u]===t)return e||u||0;return!e&&-1}}},"./node_modules/babel-runtime/node_modules/core-js/library/modules/_cof.js":function(e,n){var t={}.toString;e.exports=function(e){return t.call(e).slice(8,-1)}},"./node_modules/babel-runtime/node_modules/core-js/library/modules/_core.js":function(e,n){var t=e.exports={version:"2.5.7"};"number"==typeof __e&&(__e=t)},"./node_modules/babel-runtime/node_modules/core-js/library/modules/_ctx.js":function(e,n,t){var o=t("./node_modules/babel-runtime/node_modules/core-js/library/modules/_a-function.js");e.exports=function(e,n,t){if(o(e),void 0===n)return e;switch(t){case 1:return function(t){return e.call(n,t)};case 2:return function(t,o){return e.call(n,t,o)};case 3:return function(t,o,r){return e.call(n,t,o,r)}}return function(){return e.apply(n,arguments)}}},"./node_modules/babel-runtime/node_modules/core-js/library/modules/_defined.js":function(e,n){e.exports=function(e){if(void 0==e)throw TypeError("Can't call method on  "+e);return e}},"./node_modules/babel-runtime/node_modules/core-js/library/modules/_descriptors.js":function(e,n,t){e.exports=!t("./node_modules/babel-runtime/node_modules/core-js/library/modules/_fails.js")(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},"./node_modules/babel-runtime/node_modules/core-js/library/modules/_dom-create.js":function(e,n,t){var o=t("./node_modules/babel-runtime/node_modules/core-js/library/modules/_is-object.js"),r=t("./node_modules/babel-runtime/node_modules/core-js/library/modules/_global.js").document,i=o(r)&&o(r.createElement);e.exports=function(e){return i?r.createElement(e):{}}},"./node_modules/babel-runtime/node_modules/core-js/library/modules/_enum-bug-keys.js":function(e,n){e.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},"./node_modules/babel-runtime/node_modules/core-js/library/modules/_export.js":function(e,n,t){var o=t("./node_modules/babel-runtime/node_modules/core-js/library/modules/_global.js"),r=t("./node_modules/babel-runtime/node_modules/core-js/library/modules/_core.js"),i=t("./node_modules/babel-runtime/node_modules/core-js/library/modules/_ctx.js"),s=t("./node_modules/babel-runtime/node_modules/core-js/library/modules/_hide.js"),a=t("./node_modules/babel-runtime/node_modules/core-js/library/modules/_has.js"),l=function(e,n,t){var d,u,c,m=e&l.F,f=e&l.G,h=e&l.S,b=e&l.P,p=e&l.B,g=e&l.W,_=f?r:r[n]||(r[n]={}),y=_.prototype,j=f?o:h?o[n]:(o[n]||{}).prototype;for(d in f&&(t=n),t)(u=!m&&j&&void 0!==j[d])&&a(_,d)||(c=u?j[d]:t[d],_[d]=f&&"function"!=typeof j[d]?t[d]:p&&u?i(c,o):g&&j[d]==c?function(e){var n=function(n,t,o){if(this instanceof e){switch(arguments.length){case 0:return new e;case 1:return new e(n);case 2:return new e(n,t)}return new e(n,t,o)}return e.apply(this,arguments)};return n.prototype=e.prototype,n}(c):b&&"function"==typeof c?i(Function.call,c):c,b&&((_.virtual||(_.virtual={}))[d]=c,e&l.R&&y&&!y[d]&&s(y,d,c)))};l.F=1,l.G=2,l.S=4,l.P=8,l.B=16,l.W=32,l.U=64,l.R=128,e.exports=l},"./node_modules/babel-runtime/node_modules/core-js/library/modules/_fails.js":function(e,n){e.exports=function(e){try{return!!e()}catch(e){return!0}}},"./node_modules/babel-runtime/node_modules/core-js/library/modules/_global.js":function(e,n){var t=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=t)},"./node_modules/babel-runtime/node_modules/core-js/library/modules/_has.js":function(e,n){var t={}.hasOwnProperty;e.exports=function(e,n){return t.call(e,n)}},"./node_modules/babel-runtime/node_modules/core-js/library/modules/_hide.js":function(e,n,t){var o=t("./node_modules/babel-runtime/node_modules/core-js/library/modules/_object-dp.js"),r=t("./node_modules/babel-runtime/node_modules/core-js/library/modules/_property-desc.js");e.exports=t("./node_modules/babel-runtime/node_modules/core-js/library/modules/_descriptors.js")?function(e,n,t){return o.f(e,n,r(1,t))}:function(e,n,t){return e[n]=t,e}},"./node_modules/babel-runtime/node_modules/core-js/library/modules/_ie8-dom-define.js":function(e,n,t){e.exports=!t("./node_modules/babel-runtime/node_modules/core-js/library/modules/_descriptors.js")&&!t("./node_modules/babel-runtime/node_modules/core-js/library/modules/_fails.js")(function(){return 7!=Object.defineProperty(t("./node_modules/babel-runtime/node_modules/core-js/library/modules/_dom-create.js")("div"),"a",{get:function(){return 7}}).a})},"./node_modules/babel-runtime/node_modules/core-js/library/modules/_iobject.js":function(e,n,t){var o=t("./node_modules/babel-runtime/node_modules/core-js/library/modules/_cof.js");e.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==o(e)?e.split(""):Object(e)}},"./node_modules/babel-runtime/node_modules/core-js/library/modules/_is-object.js":function(e,n){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},"./node_modules/babel-runtime/node_modules/core-js/library/modules/_library.js":function(e,n){e.exports=!0},"./node_modules/babel-runtime/node_modules/core-js/library/modules/_meta.js":function(e,n,t){var o=t("./node_modules/babel-runtime/node_modules/core-js/library/modules/_uid.js")("meta"),r=t("./node_modules/babel-runtime/node_modules/core-js/library/modules/_is-object.js"),i=t("./node_modules/babel-runtime/node_modules/core-js/library/modules/_has.js"),s=t("./node_modules/babel-runtime/node_modules/core-js/library/modules/_object-dp.js").f,a=0,l=Object.isExtensible||function(){return!0},d=!t("./node_modules/babel-runtime/node_modules/core-js/library/modules/_fails.js")(function(){return l(Object.preventExtensions({}))}),u=function(e){s(e,o,{value:{i:"O"+ ++a,w:{}}})},c=e.exports={KEY:o,NEED:!1,fastKey:function(e,n){if(!r(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!i(e,o)){if(!l(e))return"F";if(!n)return"E";u(e)}return e[o].i},getWeak:function(e,n){if(!i(e,o)){if(!l(e))return!0;if(!n)return!1;u(e)}return e[o].w},onFreeze:function(e){return d&&c.NEED&&l(e)&&!i(e,o)&&u(e),e}}},"./node_modules/babel-runtime/node_modules/core-js/library/modules/_object-dp.js":function(e,n,t){var o=t("./node_modules/babel-runtime/node_modules/core-js/library/modules/_an-object.js"),r=t("./node_modules/babel-runtime/node_modules/core-js/library/modules/_ie8-dom-define.js"),i=t("./node_modules/babel-runtime/node_modules/core-js/library/modules/_to-primitive.js"),s=Object.defineProperty;n.f=t("./node_modules/babel-runtime/node_modules/core-js/library/modules/_descriptors.js")?Object.defineProperty:function(e,n,t){if(o(e),n=i(n,!0),o(t),r)try{return s(e,n,t)}catch(e){}if("get"in t||"set"in t)throw TypeError("Accessors not supported!");return"value"in t&&(e[n]=t.value),e}},"./node_modules/babel-runtime/node_modules/core-js/library/modules/_object-dps.js":function(e,n,t){var o=t("./node_modules/babel-runtime/node_modules/core-js/library/modules/_object-dp.js"),r=t("./node_modules/babel-runtime/node_modules/core-js/library/modules/_an-object.js"),i=t("./node_modules/babel-runtime/node_modules/core-js/library/modules/_object-keys.js");e.exports=t("./node_modules/babel-runtime/node_modules/core-js/library/modules/_descriptors.js")?Object.defineProperties:function(e,n){r(e);for(var t,s=i(n),a=s.length,l=0;a>l;)o.f(e,t=s[l++],n[t]);return e}},"./node_modules/babel-runtime/node_modules/core-js/library/modules/_object-keys-internal.js":function(e,n,t){var o=t("./node_modules/babel-runtime/node_modules/core-js/library/modules/_has.js"),r=t("./node_modules/babel-runtime/node_modules/core-js/library/modules/_to-iobject.js"),i=t("./node_modules/babel-runtime/node_modules/core-js/library/modules/_array-includes.js")(!1),s=t("./node_modules/babel-runtime/node_modules/core-js/library/modules/_shared-key.js")("IE_PROTO");e.exports=function(e,n){var t,a=r(e),l=0,d=[];for(t in a)t!=s&&o(a,t)&&d.push(t);for(;n.length>l;)o(a,t=n[l++])&&(~i(d,t)||d.push(t));return d}},"./node_modules/babel-runtime/node_modules/core-js/library/modules/_object-keys.js":function(e,n,t){var o=t("./node_modules/babel-runtime/node_modules/core-js/library/modules/_object-keys-internal.js"),r=t("./node_modules/babel-runtime/node_modules/core-js/library/modules/_enum-bug-keys.js");e.exports=Object.keys||function(e){return o(e,r)}},"./node_modules/babel-runtime/node_modules/core-js/library/modules/_object-sap.js":function(e,n,t){var o=t("./node_modules/babel-runtime/node_modules/core-js/library/modules/_export.js"),r=t("./node_modules/babel-runtime/node_modules/core-js/library/modules/_core.js"),i=t("./node_modules/babel-runtime/node_modules/core-js/library/modules/_fails.js");e.exports=function(e,n){var t=(r.Object||{})[e]||Object[e],s={};s[e]=n(t),o(o.S+o.F*i(function(){t(1)}),"Object",s)}},"./node_modules/babel-runtime/node_modules/core-js/library/modules/_property-desc.js":function(e,n){e.exports=function(e,n){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:n}}},"./node_modules/babel-runtime/node_modules/core-js/library/modules/_shared-key.js":function(e,n,t){var o=t("./node_modules/babel-runtime/node_modules/core-js/library/modules/_shared.js")("keys"),r=t("./node_modules/babel-runtime/node_modules/core-js/library/modules/_uid.js");e.exports=function(e){return o[e]||(o[e]=r(e))}},"./node_modules/babel-runtime/node_modules/core-js/library/modules/_shared.js":function(e,n,t){var o=t("./node_modules/babel-runtime/node_modules/core-js/library/modules/_core.js"),r=t("./node_modules/babel-runtime/node_modules/core-js/library/modules/_global.js"),i=r["__core-js_shared__"]||(r["__core-js_shared__"]={});(e.exports=function(e,n){return i[e]||(i[e]=void 0!==n?n:{})})("versions",[]).push({version:o.version,mode:t("./node_modules/babel-runtime/node_modules/core-js/library/modules/_library.js")?"pure":"global",copyright:"© 2018 Denis Pushkarev (zloirock.ru)"})},"./node_modules/babel-runtime/node_modules/core-js/library/modules/_to-absolute-index.js":function(e,n,t){var o=t("./node_modules/babel-runtime/node_modules/core-js/library/modules/_to-integer.js"),r=Math.max,i=Math.min;e.exports=function(e,n){return(e=o(e))<0?r(e+n,0):i(e,n)}},"./node_modules/babel-runtime/node_modules/core-js/library/modules/_to-integer.js":function(e,n){var t=Math.ceil,o=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?o:t)(e)}},"./node_modules/babel-runtime/node_modules/core-js/library/modules/_to-iobject.js":function(e,n,t){var o=t("./node_modules/babel-runtime/node_modules/core-js/library/modules/_iobject.js"),r=t("./node_modules/babel-runtime/node_modules/core-js/library/modules/_defined.js");e.exports=function(e){return o(r(e))}},"./node_modules/babel-runtime/node_modules/core-js/library/modules/_to-length.js":function(e,n,t){var o=t("./node_modules/babel-runtime/node_modules/core-js/library/modules/_to-integer.js"),r=Math.min;e.exports=function(e){return e>0?r(o(e),9007199254740991):0}},"./node_modules/babel-runtime/node_modules/core-js/library/modules/_to-primitive.js":function(e,n,t){var o=t("./node_modules/babel-runtime/node_modules/core-js/library/modules/_is-object.js");e.exports=function(e,n){if(!o(e))return e;var t,r;if(n&&"function"==typeof(t=e.toString)&&!o(r=t.call(e)))return r;if("function"==typeof(t=e.valueOf)&&!o(r=t.call(e)))return r;if(!n&&"function"==typeof(t=e.toString)&&!o(r=t.call(e)))return r;throw TypeError("Can't convert object to primitive value")}},"./node_modules/babel-runtime/node_modules/core-js/library/modules/_uid.js":function(e,n){var t=0,o=Math.random();e.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++t+o).toString(36))}},"./node_modules/babel-runtime/node_modules/core-js/library/modules/es6.object.define-properties.js":function(e,n,t){var o=t("./node_modules/babel-runtime/node_modules/core-js/library/modules/_export.js");o(o.S+o.F*!t("./node_modules/babel-runtime/node_modules/core-js/library/modules/_descriptors.js"),"Object",{defineProperties:t("./node_modules/babel-runtime/node_modules/core-js/library/modules/_object-dps.js")})},"./node_modules/babel-runtime/node_modules/core-js/library/modules/es6.object.freeze.js":function(e,n,t){var o=t("./node_modules/babel-runtime/node_modules/core-js/library/modules/_is-object.js"),r=t("./node_modules/babel-runtime/node_modules/core-js/library/modules/_meta.js").onFreeze;t("./node_modules/babel-runtime/node_modules/core-js/library/modules/_object-sap.js")("freeze",function(e){return function(n){return e&&o(n)?e(r(n)):n}})},"./node_modules/code-example/lib/rst.js":function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var o=function(e){return e&&e.__esModule?e:{default:e}}(t("./node_modules/babel-runtime/helpers/taggedTemplateLiteral.js")),r=(0,o.default)([" is not\n  possible.\n\n\n.. rubric:: Footnotes\n\n.. [1] When the default domain contains a :rst:dir:`class` directive, this directive\n       will be shadowed.  Therefore, Sphinx re-exports it as :rst:dir:`rst-class`.\n"],[" is not\n  possible.\n\n\n.. rubric:: Footnotes\n\n.. [1] When the default domain contains a :rst:dir:\\`class\\` directive, this directive\n       will be shadowed.  Therefore, Sphinx re-exports it as :rst:dir:\\`rst-class\\`.\n"]),i=(0,o.default)(["*see :func:`foo`*"],["*see :func:\\`foo\\`*"]),s=(0,o.default)([".  They\nare defined like footnotes with explicit markup blocks, like this::\n\n   .. |name| replace:: replacement *text*\n\nor this::\n\n   .. |caution| image:: warning.png\n                :alt: Warning!\n\nSee the :duref:`reST reference for substitutions <substitution-definitions>`\nfor details.\n\nIf you want to use some substitutions for all documents, put them into\n:confval:`rst_prolog` or put them into a separate file and include it into all\ndocuments you want to use them in, using the :rst:dir:`include` directive.  (Be\nsure to give the include file a file name extension differing from that of other\nsource files, to avoid Sphinx finding it as a standalone document.)\n\nSphinx defines some default substitutions, see :ref:`default-substitutions`.\n\n\nComments\n--------\n\nEvery explicit markup block which isn't a valid markup construct (like the\nfootnotes above) is regarded as a comment (:duref:`ref <comments>`).  For\nexample::\n\n   .. This is a comment.\n\nYou can indent text after a comment start to form multiline comments::\n\n   ..\n      This whole indented block\n      is a comment.\n\n      Still in the comment.\n\n\nSource encoding\n---------------\n\nSince the easiest way to include special characters like em dashes or copyright\nsigns in reST is to directly write them as Unicode characters, one has to\nspecify an encoding.  Sphinx assumes source files to be encoded in UTF-8 by\ndefault; you can change this with the :confval:`source_encoding` config value.\n\n\nGotchas\n-------\n\nThere are some problems one commonly runs into while authoring reST documents:\n\n* **Separation of inline markup:** As said above, inline markup spans must be\n  separated from the surrounding text by non-word characters, you have to use a\n  backslash-escaped space to get around that.  See `the reference\n  <http://docutils.sf.net/docs/ref/rst/restructuredtext.html#inline-markup>`_\n  for the details.\n\n* **No nested inline markup:** Something like "],[".  They\nare defined like footnotes with explicit markup blocks, like this::\n\n   .. |name| replace:: replacement *text*\n\nor this::\n\n   .. |caution| image:: warning.png\n                :alt: Warning!\n\nSee the :duref:\\`reST reference for substitutions <substitution-definitions>\\`\nfor details.\n\nIf you want to use some substitutions for all documents, put them into\n:confval:\\`rst_prolog\\` or put them into a separate file and include it into all\ndocuments you want to use them in, using the :rst:dir:\\`include\\` directive.  (Be\nsure to give the include file a file name extension differing from that of other\nsource files, to avoid Sphinx finding it as a standalone document.)\n\nSphinx defines some default substitutions, see :ref:\\`default-substitutions\\`.\n\n\nComments\n--------\n\nEvery explicit markup block which isn't a valid markup construct (like the\nfootnotes above) is regarded as a comment (:duref:\\`ref <comments>\\`).  For\nexample::\n\n   .. This is a comment.\n\nYou can indent text after a comment start to form multiline comments::\n\n   ..\n      This whole indented block\n      is a comment.\n\n      Still in the comment.\n\n\nSource encoding\n---------------\n\nSince the easiest way to include special characters like em dashes or copyright\nsigns in reST is to directly write them as Unicode characters, one has to\nspecify an encoding.  Sphinx assumes source files to be encoded in UTF-8 by\ndefault; you can change this with the :confval:\\`source_encoding\\` config value.\n\n\nGotchas\n-------\n\nThere are some problems one commonly runs into while authoring reST documents:\n\n* **Separation of inline markup:** As said above, inline markup spans must be\n  separated from the surrounding text by non-word characters, you have to use a\n  backslash-escaped space to get around that.  See \\`the reference\n  <http://docutils.sf.net/docs/ref/rst/restructuredtext.html#inline-markup>\\`_\n  for the details.\n\n* **No nested inline markup:** Something like "]),a=(0,o.default)(["|name|"],["|name|"]),l=(0,o.default)(['.\n\n\nSubstitutions\n-------------\n\nreST supports "substitutions" (:duref:`ref <substitution-definitions>`), which\nare pieces of text and/or markup referred to in the text by '],['.\n\n\nSubstitutions\n-------------\n\nreST supports "substitutions" (:duref:\\`ref <substitution-definitions>\\`), which\nare pieces of text and/or markup referred to in the text by ']),d=(0,o.default)(["#"],["#"]),u=(0,o.default)([').\n\n\nCitations\n---------\n\nStandard reST citations (:duref:`ref <citations>`) are supported, with the\nadditional feature that they are "global", i.e. all citations can be referenced\nfrom all files.  Use them like so::\n\n   Lorem ipsum [Ref]_ dolor sit amet.\n\n   .. [Ref] Book or article reference, URL or whatever.\n\nCitation usage is similar to footnote usage, but with a label that is not\nnumeric or begins with '],[').\n\n\nCitations\n---------\n\nStandard reST citations (:duref:\\`ref <citations>\\`) are supported, with the\nadditional feature that they are "global", i.e. all citations can be referenced\nfrom all files.  Use them like so::\n\n   Lorem ipsum [Ref]_ dolor sit amet.\n\n   .. [Ref] Book or article reference, URL or whatever.\n\nCitation usage is similar to footnote usage, but with a label that is not\nnumeric or begins with ']),c=(0,o.default)(["[#]_"],["[#]_"]),m=(0,o.default)([") or use auto-numbered\nfootnotes without names ("],[") or use auto-numbered\nfootnotes without names ("]),f=(0,o.default)(["[1]_"],["[1]_"]),h=(0,o.default)([' to mark the footnote\nlocation, and add the footnote body at the bottom of the document after a\n"Footnotes" rubric heading, like so::\n\n   Lorem ipsum [#f1]_ dolor sit amet ... [#f2]_\n\n   .. rubric:: Footnotes\n\n   .. [#f1] Text of the first footnote.\n   .. [#f2] Text of the second footnote.\n\nYou can also explicitly number the footnotes ('],[' to mark the footnote\nlocation, and add the footnote body at the bottom of the document after a\n"Footnotes" rubric heading, like so::\n\n   Lorem ipsum [#f1]_ dolor sit amet ... [#f2]_\n\n   .. rubric:: Footnotes\n\n   .. [#f1] Text of the first footnote.\n   .. [#f2] Text of the second footnote.\n\nYou can also explicitly number the footnotes (']),b=(0,o.default)(["[#name]_"],["[#name]_"]),p=(0,o.default)([" was given and two files :file:`gnu.pdf`\nand :file:`gnu.png` existed in the source tree, the LaTeX builder would choose\nthe former, while the HTML builder would prefer the latter.\n\n.. versionchanged:: 0.4\n   Added the support for file names ending in an asterisk.\n\n.. versionchanged:: 0.6\n   Image paths can now be absolute.\n\n\nFootnotes\n---------\n\nFor footnotes (:duref:`ref <footnotes>`), use "],[" was given and two files :file:\\`gnu.pdf\\`\nand :file:\\`gnu.png\\` existed in the source tree, the LaTeX builder would choose\nthe former, while the HTML builder would prefer the latter.\n\n.. versionchanged:: 0.4\n   Added the support for file names ending in an asterisk.\n\n.. versionchanged:: 0.6\n   Image paths can now be absolute.\n\n\nFootnotes\n---------\n\nFor footnotes (:duref:\\`ref <footnotes>\\`), use "]),g=(0,o.default)(["gnu.*"],["gnu.*"]),_=(0,o.default)([" for points) will be used for HTML and LaTeX output.\n\nSphinx extends the standard docutils behavior by allowing an asterisk for the\nextension::\n\n   .. image:: gnu.*\n\nSphinx then searches for all images matching the provided pattern and determines\ntheir type.  Each builder then chooses the best image out of these candidates.\nFor instance, if the file name "],[" for points) will be used for HTML and LaTeX output.\n\nSphinx extends the standard docutils behavior by allowing an asterisk for the\nextension::\n\n   .. image:: gnu.*\n\nSphinx then searches for all images matching the provided pattern and determines\ntheir type.  Each builder then chooses the best image out of these candidates.\nFor instance, if the file name "]),y=(0,o.default)(["pt"],["pt"]),j=(0,o.default)([") is as follows:\nif the size has no unit or the unit is pixels, the given size will only be\nrespected for output channels that support pixels (i.e. not in LaTeX output).\nOther units (like "],[") is as follows:\nif the size has no unit or the unit is pixels, the given size will only be\nrespected for output channels that support pixels (i.e. not in LaTeX output).\nOther units (like "]),w=(0,o.default)(["height"],["height"]),k=(0,o.default)([" and "],[" and "]),v=(0,o.default)(["width"],["width"]),x=(0,o.default)([" directory for HTML output.)\n\nInterpretation of image size options ("],[" directory for HTML output.)\n\nInterpretation of image size options ("]),T=(0,o.default)(["_static"],["_static"]),S=(0,o.default)([".\n\nSphinx will automatically copy image files over to a subdirectory of the output\ndirectory on building (e.g. the "],[".\n\nSphinx will automatically copy image files over to a subdirectory of the output\ndirectory on building (e.g. the "]),I=(0,o.default)(["/images/spam.png"],["/images/spam.png"]),F=(0,o.default)([" or\n"],[" or\n"]),L=(0,o.default)(["../images/spam.png"],["../images/spam.png"]),M=(0,o.default)([" as "],[" as "]),O=(0,o.default)(["images/spam.png"],["images/spam.png"]),E=(0,o.default)([" could refer\nto the image "],[" could refer\nto the image "]),H=(0,o.default)(["sketch/spam.rst"],["sketch/spam.rst"]),P=(0,o.default)([") must either be\nrelative to the source file, or absolute which means that they are relative to\nthe top source directory.  For example, the file "],[") must either be\nrelative to the source file, or absolute which means that they are relative to\nthe top source directory.  For example, the file "]),z=(0,o.default)(["gnu.png"],["gnu.png"]),A=(0,o.default)([" (as you can see, options are given in the lines immediately following\nthe arguments and indicated by the colons).  Options must be indented to the\nsame level as the directive content.\n\nThe directive content follows after a blank line and is indented relative to the\ndirective start.\n\n\nImages\n------\n\nreST supports an image directive (:dudir:`ref <image>`), used like so::\n\n   .. image:: gnu.png\n      (options)\n\nWhen used within Sphinx, the file name given (here "],[" (as you can see, options are given in the lines immediately following\nthe arguments and indicated by the colons).  Options must be indented to the\nsame level as the directive content.\n\nThe directive content follows after a blank line and is indented relative to the\ndirective start.\n\n\nImages\n------\n\nreST supports an image directive (:dudir:\\`ref <image>\\`), used like so::\n\n   .. image:: gnu.png\n      (options)\n\nWhen used within Sphinx, the file name given (here "]),D=(0,o.default)(["module"],["module"]),q=(0,o.default)([" is the directive name.  It is given two arguments here, the\nremainder of the first line and the second line, as well as one option\n"],[" is the directive name.  It is given two arguments here, the\nremainder of the first line and the second line, as well as one option\n"]),B=(0,o.default)(["function"],["function"]),U=(0,o.default)([" tags)\n  - :dudir:`title` (override document title)\n\n* Influencing markup:\n\n  - :dudir:`default-role` (set a new default role)\n  - :dudir:`role` (create a new role)\n\n  Since these are only per-file, better use Sphinx' facilities for setting the\n  :confval:`default_role`.\n\nDo *not* use the directives :dudir:`sectnum`, :dudir:`header` and\n:dudir:`footer`.\n\nDirectives added by Sphinx are described in :ref:`sphinxmarkup`.\n\nBasically, a directive consists of a name, arguments, options and content. (Keep\nthis terminology in mind, it is used in the next chapter describing custom\ndirectives.)  Looking at this example, ::\n\n   .. function:: foo(x)\n                 foo(y, z)\n      :module: some.module.name\n\n      Return a line of text input from the user.\n\n"],[" tags)\n  - :dudir:\\`title\\` (override document title)\n\n* Influencing markup:\n\n  - :dudir:\\`default-role\\` (set a new default role)\n  - :dudir:\\`role\\` (create a new role)\n\n  Since these are only per-file, better use Sphinx' facilities for setting the\n  :confval:\\`default_role\\`.\n\nDo *not* use the directives :dudir:\\`sectnum\\`, :dudir:\\`header\\` and\n:dudir:\\`footer\\`.\n\nDirectives added by Sphinx are described in :ref:\\`sphinxmarkup\\`.\n\nBasically, a directive consists of a name, arguments, options and content. (Keep\nthis terminology in mind, it is used in the next chapter describing custom\ndirectives.)  Looking at this example, ::\n\n   .. function:: foo(x)\n                 foo(y, z)\n      :module: some.module.name\n\n      Return a line of text input from the user.\n\n"]),N=(0,o.default)(["<meta>"],["<meta>"]),R=(0,o.default)([" in HTML)\n  - :dudir:`rubric` (a heading without relation to the document sectioning)\n  - :dudir:`topic`, :dudir:`sidebar` (special highlighted body elements)\n  - :dudir:`parsed-literal` (literal block that supports inline markup)\n  - :dudir:`epigraph` (a block quote with optional attribution line)\n  - :dudir:`highlights`, :dudir:`pull-quote` (block quotes with their own\n    class attribute)\n  - :dudir:`compound` (a compound paragraph)\n\n* Special tables:\n\n  - :dudir:`table` (a table with title)\n  - :dudir:`csv-table` (a table generated from comma-separated values)\n  - :dudir:`list-table` (a table generated from a list of lists)\n\n* Special directives:\n\n  - :dudir:`raw` (include raw target-format markup)\n  - :dudir:`include` (include reStructuredText from another file)\n    -- in Sphinx, when given an absolute include file path, this directive takes\n    it as relative to the source directory\n  - :dudir:`class` (assign a class attribute to the next element) [1]_\n\n* HTML specifics:\n\n  - :dudir:`meta` (generation of HTML "],[" in HTML)\n  - :dudir:\\`rubric\\` (a heading without relation to the document sectioning)\n  - :dudir:\\`topic\\`, :dudir:\\`sidebar\\` (special highlighted body elements)\n  - :dudir:\\`parsed-literal\\` (literal block that supports inline markup)\n  - :dudir:\\`epigraph\\` (a block quote with optional attribution line)\n  - :dudir:\\`highlights\\`, :dudir:\\`pull-quote\\` (block quotes with their own\n    class attribute)\n  - :dudir:\\`compound\\` (a compound paragraph)\n\n* Special tables:\n\n  - :dudir:\\`table\\` (a table with title)\n  - :dudir:\\`csv-table\\` (a table generated from comma-separated values)\n  - :dudir:\\`list-table\\` (a table generated from a list of lists)\n\n* Special directives:\n\n  - :dudir:\\`raw\\` (include raw target-format markup)\n  - :dudir:\\`include\\` (include reStructuredText from another file)\n    -- in Sphinx, when given an absolute include file path, this directive takes\n    it as relative to the source directory\n  - :dudir:\\`class\\` (assign a class attribute to the next element) [1]_\n\n* HTML specifics:\n\n  - :dudir:\\`meta\\` (generation of HTML "]),C=(0,o.default)(["<div>"],["<div>"]),W=(0,o.default)([' followed by\nwhitespace and is terminated by the next paragraph at the same level of\nindentation.  (There needs to be a blank line between explicit markup and normal\nparagraphs.  This may all sound a bit complicated, but it is intuitive enough\nwhen you write it.)\n\n\n.. _directives:\n\nDirectives\n----------\n\nA directive (:duref:`ref <directives>`) is a generic block of explicit markup.\nBesides roles, it is one of the extension mechanisms of reST, and Sphinx makes\nheavy use of it.\n\nDocutils supports the following directives:\n\n* Admonitions: :dudir:`attention`, :dudir:`caution`, :dudir:`danger`,\n  :dudir:`error`, :dudir:`hint`, :dudir:`important`, :dudir:`note`,\n  :dudir:`tip`, :dudir:`warning` and the generic :dudir:`admonition`.\n  (Most themes style only "note" and "warning" specially.)\n\n* Images:\n\n  - :dudir:`image` (see also Images_ below)\n  - :dudir:`figure` (an image with caption and optional legend)\n\n* Additional body elements:\n\n  - :dudir:`contents` (a local, i.e. for the current file only, table of\n    contents)\n  - :dudir:`container` (a container with a custom class, useful to generate an\n    outer '],[' followed by\nwhitespace and is terminated by the next paragraph at the same level of\nindentation.  (There needs to be a blank line between explicit markup and normal\nparagraphs.  This may all sound a bit complicated, but it is intuitive enough\nwhen you write it.)\n\n\n.. _directives:\n\nDirectives\n----------\n\nA directive (:duref:\\`ref <directives>\\`) is a generic block of explicit markup.\nBesides roles, it is one of the extension mechanisms of reST, and Sphinx makes\nheavy use of it.\n\nDocutils supports the following directives:\n\n* Admonitions: :dudir:\\`attention\\`, :dudir:\\`caution\\`, :dudir:\\`danger\\`,\n  :dudir:\\`error\\`, :dudir:\\`hint\\`, :dudir:\\`important\\`, :dudir:\\`note\\`,\n  :dudir:\\`tip\\`, :dudir:\\`warning\\` and the generic :dudir:\\`admonition\\`.\n  (Most themes style only "note" and "warning" specially.)\n\n* Images:\n\n  - :dudir:\\`image\\` (see also Images_ below)\n  - :dudir:\\`figure\\` (an image with caption and optional legend)\n\n* Additional body elements:\n\n  - :dudir:\\`contents\\` (a local, i.e. for the current file only, table of\n    contents)\n  - :dudir:\\`container\\` (a container with a custom class, useful to generate an\n    outer ']),X=(0,o.default)([".."],[".."]),Y=(0,o.default)([', for paragraphs\n\nOf course, you are free to use your own marker characters (see the reST\ndocumentation), and use a deeper nesting level, but keep in mind that most\ntarget formats (HTML, LaTeX) have a limited supported nesting depth.\n\n\nExplicit Markup\n---------------\n\n"Explicit markup" (:duref:`ref <explicit-markup-blocks>`) is used in reST for\nmost constructs that need special handling, such as footnotes,\nspecially-highlighted paragraphs, comments, and generic directives.\n\nAn explicit markup block begins with a line starting with '],[', for paragraphs\n\nOf course, you are free to use your own marker characters (see the reST\ndocumentation), and use a deeper nesting level, but keep in mind that most\ntarget formats (HTML, LaTeX) have a limited supported nesting depth.\n\n\nExplicit Markup\n---------------\n\n"Explicit markup" (:duref:\\`ref <explicit-markup-blocks>\\`) is used in reST for\nmost constructs that need special handling, such as footnotes,\nspecially-highlighted paragraphs, comments, and generic directives.\n\nAn explicit markup block begins with a line starting with ']),G=(0,o.default)(['"'],['"']),K=(0,o.default)([", for subsubsections\n* "],[", for subsubsections\n* "]),Q=(0,o.default)(["^"],["^"]),J=(0,o.default)([", for subsections\n* "],[", for subsections\n* "]),V=(0,o.default)(["-"],["-"]),Z=(0,o.default)([", for sections\n* "],[", for sections\n* "]),$=(0,o.default)(["="],["="]),ee=(0,o.default)([" with overline, for chapters\n* "],[" with overline, for chapters\n* "]),ne=(0,o.default)(["*"],["*"]),te=(0,o.default)([" with overline, for parts\n* "],[" with overline, for parts\n* "]),oe=(0,o.default)(["Link text <http://example.com/>`_`` for inline web links.  If the link\ntext should be the web address, you don't need special markup at all, the parser\nfinds links and mail addresses in ordinary text.\n\nYou can also separate the link and the target definition (:duref:`ref\n<hyperlink-targets>`), like this::\n\n   This is a paragraph that contains `a link`_.\n\n   .. _a link: http://example.com/\n\n\nInternal links\n^^^^^^^^^^^^^^\n\nInternal linking is done via a special reST role provided by Sphinx, see the\nsection on specific markup, :ref:`ref-role`.\n\n\nSections\n--------\n\nSection headers (:duref:`ref <sections>`) are created by underlining (and\noptionally overlining) the section title with a punctuation character, at least\nas long as the text::\n\n   =================\n   This is a heading\n   =================\n\nNormally, there are no heading levels assigned to certain characters as the\nstructure is determined from the succession of headings.  However, for the\nPython documentation, this convention is used which you may follow:\n\n* "],["Link text <http://example.com/>\\`_\\`\\` for inline web links.  If the link\ntext should be the web address, you don't need special markup at all, the parser\nfinds links and mail addresses in ordinary text.\n\nYou can also separate the link and the target definition (:duref:\\`ref\n<hyperlink-targets>\\`), like this::\n\n   This is a paragraph that contains \\`a link\\`_.\n\n   .. _a link: http://example.com/\n\n\nInternal links\n^^^^^^^^^^^^^^\n\nInternal linking is done via a special reST role provided by Sphinx, see the\nsection on specific markup, :ref:\\`ref-role\\`.\n\n\nSections\n--------\n\nSection headers (:duref:\\`ref <sections>\\`) are created by underlining (and\noptionally overlining) the section title with a punctuation character, at least\nas long as the text::\n\n   =================\n   This is a heading\n   =================\n\nNormally, there are no heading levels assigned to certain characters as the\nstructure is determined from the succession of headings.  However, for the\nPython documentation, this convention is used which you may follow:\n\n* "]),re=(0,o.default)([' marker is smart:\n\n* If it occurs as a paragraph of its own, that paragraph is completely left\n  out of the document.\n* If it is preceded by whitespace, the marker is removed.\n* If it is preceded by non-whitespace, the marker is replaced by a single\n  colon.\n\nThat way, the second sentence in the above example\'s first paragraph would be\nrendered as "The next paragraph is a code sample:".\n\n\n.. _rst-tables:\n\nTables\n------\n\nTwo forms of tables are supported.  For *grid tables* (:duref:`ref\n<grid-tables>`), you have to "paint" the cell grid yourself.  They look like\nthis::\n\n   +------------------------+------------+----------+----------+\n   | Header row, column 1   | Header 2   | Header 3 | Header 4 |\n   | (header rows optional) |            |          |          |\n   +========================+============+==========+==========+\n   | body row 1, column 1   | column 2   | column 3 | column 4 |\n   +------------------------+------------+----------+----------+\n   | body row 2             | ...        | ...      |          |\n   +------------------------+------------+----------+----------+\n\n*Simple tables* (:duref:`ref <simple-tables>`) are easier to write, but\nlimited: they must contain more than one row, and the first column cannot\ncontain multiple lines.  They look like this::\n\n   =====  =====  =======\n   A      B      A and B\n   =====  =====  =======\n   False  False  False\n   True   False  False\n   False  True   False\n   True   True   True\n   =====  =====  =======\n\n\nHyperlinks\n----------\n\nExternal links\n^^^^^^^^^^^^^^\n\nUse `'],[' marker is smart:\n\n* If it occurs as a paragraph of its own, that paragraph is completely left\n  out of the document.\n* If it is preceded by whitespace, the marker is removed.\n* If it is preceded by non-whitespace, the marker is replaced by a single\n  colon.\n\nThat way, the second sentence in the above example\'s first paragraph would be\nrendered as "The next paragraph is a code sample:".\n\n\n.. _rst-tables:\n\nTables\n------\n\nTwo forms of tables are supported.  For *grid tables* (:duref:\\`ref\n<grid-tables>\\`), you have to "paint" the cell grid yourself.  They look like\nthis::\n\n   +------------------------+------------+----------+----------+\n   | Header row, column 1   | Header 2   | Header 3 | Header 4 |\n   | (header rows optional) |            |          |          |\n   +========================+============+==========+==========+\n   | body row 1, column 1   | column 2   | column 3 | column 4 |\n   +------------------------+------------+----------+----------+\n   | body row 2             | ...        | ...      |          |\n   +------------------------+------------+----------+----------+\n\n*Simple tables* (:duref:\\`ref <simple-tables>\\`) are easier to write, but\nlimited: they must contain more than one row, and the first column cannot\ncontain multiple lines.  They look like this::\n\n   =====  =====  =======\n   A      B      A and B\n   =====  =====  =======\n   False  False  False\n   True   False  False\n   False  True   False\n   True   True   True\n   =====  =====  =======\n\n\nHyperlinks\n----------\n\nExternal links\n^^^^^^^^^^^^^^\n\nUse \\`']),ie=(0,o.default)(["::"],["::"]),se=(0,o.default)([".  The literal block must be indented\n(and, like all paragraphs, separated from the surrounding ones by blank lines)::\n\n   This is a normal text paragraph. The next paragraph is a code sample::\n\n      It is not processed in any way, except\n      that the indentation is removed.\n\n      It can span multiple lines.\n\n   This is a normal text paragraph again.\n\nThe handling of the "],[".  The literal block must be indented\n(and, like all paragraphs, separated from the surrounding ones by blank lines)::\n\n   This is a normal text paragraph. The next paragraph is a code sample::\n\n      It is not processed in any way, except\n      that the indentation is removed.\n\n      It can span multiple lines.\n\n   This is a normal text paragraph again.\n\nThe handling of the "]),ae=(0,o.default)([" sign::\n\n   * This is a bulleted list.\n   * It has two items, the second\n     item uses two lines.\n\n   1. This is a numbered list.\n   2. It has two items too.\n\n   #. This is a numbered list.\n   #. It has two items too.\n\n\nNested lists are possible, but be aware that they must be separated from the\nparent list items by blank lines::\n\n   * this is\n   * a list\n\n     * with a nested list\n     * and some subitems\n\n   * and here the parent list continues\n\nDefinition lists (:duref:`ref <definition-lists>`) are created as follows::\n\n   term (up to a line of text)\n      Definition of the term, which must be indented\n\n      and can even consist of multiple paragraphs\n\n   next term\n      Description.\n\nNote that the term cannot have more than one line of text.\n\nQuoted paragraphs (:duref:`ref <block-quotes>`) are created by just indenting\nthem more than the surrounding paragraphs.\n\nLine blocks (:duref:`ref <line-blocks>`) are a way of preserving line breaks::\n\n   | These lines are\n   | broken exactly like in\n   | the source file.\n\nThere are also several more special blocks available:\n\n* field lists (:duref:`ref <field-lists>`)\n* option lists (:duref:`ref <option-lists>`)\n* quoted literal blocks (:duref:`ref <quoted-literal-blocks>`)\n* doctest blocks (:duref:`ref <doctest-blocks>`)\n\n\nSource Code\n-----------\n\nLiteral code blocks (:duref:`ref <literal-blocks>`) are introduced by ending a\nparagraph with the special marker "],[" sign::\n\n   * This is a bulleted list.\n   * It has two items, the second\n     item uses two lines.\n\n   1. This is a numbered list.\n   2. It has two items too.\n\n   #. This is a numbered list.\n   #. It has two items too.\n\n\nNested lists are possible, but be aware that they must be separated from the\nparent list items by blank lines::\n\n   * this is\n   * a list\n\n     * with a nested list\n     * and some subitems\n\n   * and here the parent list continues\n\nDefinition lists (:duref:\\`ref <definition-lists>\\`) are created as follows::\n\n   term (up to a line of text)\n      Definition of the term, which must be indented\n\n      and can even consist of multiple paragraphs\n\n   next term\n      Description.\n\nNote that the term cannot have more than one line of text.\n\nQuoted paragraphs (:duref:\\`ref <block-quotes>\\`) are created by just indenting\nthem more than the surrounding paragraphs.\n\nLine blocks (:duref:\\`ref <line-blocks>\\`) are a way of preserving line breaks::\n\n   | These lines are\n   | broken exactly like in\n   | the source file.\n\nThere are also several more special blocks available:\n\n* field lists (:duref:\\`ref <field-lists>\\`)\n* option lists (:duref:\\`ref <option-lists>\\`)\n* quoted literal blocks (:duref:\\`ref <quoted-literal-blocks>\\`)\n* doctest blocks (:duref:\\`ref <doctest-blocks>\\`)\n\n\nSource Code\n-----------\n\nLiteral code blocks (:duref:\\`ref <literal-blocks>\\`) are introduced by ending a\nparagraph with the special marker "]),le=(0,o.default)(["\n* :durole:`subscript` -- subscript text\n* :durole:`superscript` -- superscript text\n* :durole:`title-reference` -- for titles of books, periodicals, and other\n  materials\n\nSee :ref:`inline-markup` for roles added by Sphinx.\n\n\nLists and Quote-like blocks\n---------------------------\n\nList markup (:duref:`ref <bullet-lists>`) is natural: just place an asterisk at\nthe start of a paragraph and indent properly.  The same goes for numbered lists;\nthey can also be autonumbered using a "],["\n* :durole:\\`subscript\\` -- subscript text\n* :durole:\\`superscript\\` -- superscript text\n* :durole:\\`title-reference\\` -- for titles of books, periodicals, and other\n  materials\n\nSee :ref:\\`inline-markup\\` for roles added by Sphinx.\n\n\nLists and Quote-like blocks\n---------------------------\n\nList markup (:duref:\\`ref <bullet-lists>\\`) is natural: just place an asterisk at\nthe start of a paragraph and indent properly.  The same goes for numbered lists;\nthey can also be autonumbered using a "]),de=(0,o.default)([""],[""]),ue=(0,o.default)(["literal"],["literal"]),ce=(0,o.default)(["\n* :durole:`literal` -- alternate spelling for "],["\n* :durole:\\`literal\\` -- alternate spelling for "]),me=(0,o.default)(["**strong**"],["**strong**"]),fe=(0,o.default)(["\n* :durole:`strong` -- alternate spelling for "],["\n* :durole:\\`strong\\` -- alternate spelling for "]),he=(0,o.default)(["*emphasis*"],["*emphasis*"]),be=(0,o.default)([".\n\nStandard reST provides the following roles:\n\n* :durole:`emphasis` -- alternate spelling for "],[".\n\nStandard reST provides the following roles:\n\n* :durole:\\`emphasis\\` -- alternate spelling for "]),pe=(0,o.default)([":rolename:`content`"],[":rolename:\\`content\\`"]),ge=(0,o.default)(['.\n\nThese restrictions may be lifted in future versions of the docutils.\n\nreST also allows for custom "interpreted text roles"\', which signify that the\nenclosed text should be interpreted in a specific way.  Sphinx uses this to\nprovide semantic markup and cross-referencing of identifiers, as described in\nthe appropriate section.  The general syntax is '],['.\n\nThese restrictions may be lifted in future versions of the docutils.\n\nreST also allows for custom "interpreted text roles"\', which signify that the\nenclosed text should be interpreted in a specific way.  Sphinx uses this to\nprovide semantic markup and cross-referencing of identifiers, as described in\nthe appropriate section.  The general syntax is ']),_e=(0,o.default)(["thisis *one* word"],["thisis\\ *one*\\ word"]),ye=(0,o.default)([" is wrong,\n* it must be separated from surrounding text by non-word characters.  Use a\n  backslash escaped space to work around that: "],[" is wrong,\n* it must be separated from surrounding text by non-word characters.  Use a\n  backslash escaped space to work around that: "]),je=(0,o.default)(["* text*"],["* text*"]),we=(0,o.default)([" for code samples.\n\nIf asterisks or backquotes appear in running text and could be confused with\ninline markup delimiters, they have to be escaped with a backslash.\n\nBe aware of some restrictions of this markup:\n\n* it may not be nested,\n* content may not start or end with whitespace: "],[" for code samples.\n\nIf asterisks or backquotes appear in running text and could be confused with\ninline markup delimiters, they have to be escaped with a backslash.\n\nBe aware of some restrictions of this markup:\n\n* it may not be nested,\n* content may not start or end with whitespace: "]),ke=(0,o.default)(["text"],["text"]),ve=(0,o.default)([" for strong emphasis (boldface), and\n* backquotes: "],[" for strong emphasis (boldface), and\n* backquotes: "]),xe=(0,o.default)(["**text**"],["**text**"]),Te=(0,o.default)([" for emphasis (italics),\n* two asterisks: "],[" for emphasis (italics),\n* two asterisks: "]);var Se='.. This is an excerpt from Sphinx documentation: http://sphinx.pocoo.org/_sources/rest.txt\n\n.. highlightlang:: rest\n\n.. _rst-primer:\n\nreStructuredText Primer\n=======================\n\nThis section is a brief introduction to reStructuredText (reST) concepts and\nsyntax, intended to provide authors with enough information to author documents\nproductively.  Since reST was designed to be a simple, unobtrusive markup\nlanguage, this will not take too long.\n\n.. seealso::\n\n   The authoritative `reStructuredText User Documentation\n   <http://docutils.sourceforge.net/rst.html>`_.  The "ref" links in this\n   document link to the description of the individual constructs in the reST\n   reference.\n\n\nParagraphs\n----------\n\nThe paragraph (:duref:`ref <paragraphs>`) is the most basic block in a reST\ndocument.  Paragraphs are simply chunks of text separated by one or more blank\nlines.  As in Python, indentation is significant in reST, so all lines of the\nsame paragraph must be left-aligned to the same level of indentation.\n\n\n.. _inlinemarkup:\n\nInline markup\n-------------\n\nThe standard reST inline markup is quite simple: use\n\n* one asterisk: '((0,o.default)(["*text*"],["*text*"]))(Te)(xe)(ve)(de)(ke)(de)(we)(je)(ye)(_e)(ge)(pe)(be)(he)(fe)(me)(ce)(de)(ue)(de)(le)(d)(ae)(ie)(se)(ie)(re)(oe)(d)(te)(ne)(ee)($)(Z)(V)(J)(Q)(K)(G)(Y)(X)(W)(C)(R)(N)(U)(B)(q)(D)(A)(z)(P)(H)(E)(O)(M)(L)(F)(I)(S)(T)(x)(v)(k)(w)(j)(y)(_)(g)(p)(b)(h)(f)(m)(c)(u)(d)(l)(a)(s)(i)(r);n.default=Se}}]);