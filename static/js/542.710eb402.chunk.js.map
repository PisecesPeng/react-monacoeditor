{"version":3,"sources":["../node_modules/code-example/lib/pegjs.js"],"names":["Object","defineProperty","exports","value","default"],"mappings":"6IAEAA,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG","file":"static/js/542.710eb402.chunk.js","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"/*\\n * Classic example grammar, which recognizes simple arithmetic expressions like\\n * \\\"2*(3+4)\\\". The parser generated from this grammar then computes their value.\\n */\\n\\nstart\\n  = additive\\n\\nadditive\\n  = left:multiplicative \\\"+\\\" right:additive { return left + right; }\\n  / multiplicative\\n\\nmultiplicative\\n  = left:primary \\\"*\\\" right:multiplicative { return left * right; }\\n  / primary\\n\\nprimary\\n  = integer\\n  / \\\"(\\\" additive:additive \\\")\\\" { return additive; }\\n\\ninteger \\\"integer\\\"\\n  = digits:[0-9]+ { return parseInt(digits.join(\\\"\\\"), 10); }\\n\\nletter = [a-z]+\\n\";\nvar _default = code;\nexports.default = _default;"],"sourceRoot":""}